

package niconico

import (
	"fmt"
	"os"
	"time"
	"os/signal"
	"syscall"
	"net/http"
	"io/ioutil"
	"log"
	"encoding/json"
	"bytes"
	"../options"
	"../obj"
	"../files"
)


func getActionTrackId() (actionTrackId string, err error) {
	uri := "https://public.api.nicovideo.jp/v1/action-track-ids.json"
	req, _ := http.NewRequest("POST", uri, nil)

	req.Header.Set("Content-Type", "application/json")

	client := new(http.Client)
	resp, e := client.Do(req)
	if e != nil {
		err = e
		return
	}
	defer resp.Body.Close()
	bs, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}

	var props interface{}
	if err = json.Unmarshal(bs, &props); err != nil {
		return
	}

	//obj.PrintAsJson(props)

	data, ok := obj.FindString(props, "data")
	if (! ok) {
		err = fmt.Errorf("actionTrackId not found")
	}
	actionTrackId = data

	return
}

func jikkenWatching(opt options.Option, actionTrackId string, isArchive bool) (props interface{}, err error) {

	str, _ := json.Marshal(OBJ{
		"actionTrackId": actionTrackId,
		"isBroadcaster": false,
		"isLowLatencyStream": true,
		"streamCapacity": "superhigh",
		"streamProtocol": "https",
		"streamQuality": "auto", // high, auto
	})
	if err != nil {
		log.Println(err)
		return
	}

	data := bytes.NewReader(str)

	var uri string
	if isArchive {
		uri = fmt.Sprintf("https://api.cas.nicovideo.jp/v1/services/live/programs/%s/watching-archive", opt.NicoLiveId)
	} else {
		uri = fmt.Sprintf("https://api.cas.nicovideo.jp/v1/services/live/programs/%s/watching", opt.NicoLiveId)
	}
	req, _ := http.NewRequest("POST", uri, data)

	//if opt.NicoSession != "" {
		req.Header.Set("Cookie", "user_session=" + opt.NicoSession)
	//}
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Origin", "https://cas.nicovideo.jp")
	req.Header.Set("X-Connection-Environment", "ethernet")
	req.Header.Set("X-Frontend-Id", "91")

	client := new(http.Client)
	resp, e := client.Do(req)
	if e != nil {
		err = e
		return
	}
	defer resp.Body.Close()
	bs, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}

	if err = json.Unmarshal([]byte(bs), &props); err != nil {
		return
	}

	//obj.PrintAsJson(props)

	return
}


func jikkenPut(opt options.Option, actionTrackId string) (forbidden, notOnAir bool, err error) {
	str, _ := json.Marshal(OBJ{
		"actionTrackId": actionTrackId,
		"isBroadcaster": false,
	})
	if err != nil {
		log.Println(err)
	}
	fmt.Printf("\n%s\n\n", str)

	data := bytes.NewReader(str)

	uri := fmt.Sprintf("https://api.cas.nicovideo.jp/v1/services/live/programs/%s/watching", opt.NicoLiveId)
	req, _ := http.NewRequest("PUT", uri, data)

	//if opt.NicoSession != "" {
		req.Header.Set("Cookie", "user_session=" + opt.NicoSession)
	//}
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Origin", "https://cas.nicovideo.jp")
	req.Header.Set("X-Frontend-Id", "91")

	client := new(http.Client)
	resp, e := client.Do(req)
	if e != nil {
		err = e
		return
	}
	defer resp.Body.Close()
	bs, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}

	var props interface{}
	if err = json.Unmarshal([]byte(bs), &props); err != nil {
		return
	}

	//obj.PrintAsJson(props)

	if code, ok := obj.FindString(props, "meta", "errorCode"); ok {
		switch code {
		case "FORBIDDEN":
			forbidden = true
			return
		case "PROGRAM_NOT_ONAIR":
			notOnAir = true
			return
		}
	}

	return
}


func jikkenHousou(nicoliveProgramId, title, userId, nickname, communityId string, opt options.Option, isArchive bool) (err error) {

	chInterrupt := make(chan os.Signal, 10)
	signal.Notify(chInterrupt, os.Interrupt, syscall.SIGTERM, syscall.SIGINT)

	actionTrackId, err := getActionTrackId()
	if err != nil {
		log.Println(err)
	}

	media := &NicoMedia{}

	defer func() {
		if media.zipWriter != nil {
			media.zipWriter.Close()
		}
	}()

	title = files.ReplaceForbidden(title)
	nickname = files.ReplaceForbidden(nickname)
	media.fileName = fmt.Sprintf("%s-%s-%s.zip", nicoliveProgramId, nickname, title)


	var nLast int
	L_main: for {
		select {
		case <-chInterrupt:
			break L_main
		default:
		}
		props, e := jikkenWatching(opt, actionTrackId, isArchive)
		if e != nil {
			err = e
			log.Println(err)
			return
		}

		if uri, ok := obj.FindString(props, "data", "streamServer", "url"); ok {
			//fmt.Println(uri)

			is403, e := media.SetPlaylist(uri)
			if is403 {
				break L_main
			}
			if e != nil {
				err = e
				log.Println(e)
				return
			}
		}

		L_loc: for i := 0; true; i++ {
			select {
			case <-chInterrupt:
				break L_main
			default:
			}

			is403, e := media.GetMedias()
			if is403 {
				n := media.getNumChunk()
				if n != nLast {
					nLast = n
					break L_loc
				} else {
					break L_main
				}
			}
			if e != nil {
				log.Println(e)
				return
			}
			if i > 60 {
				forbidden, notOnAir, e := jikkenPut(opt, actionTrackId)
				if e != nil {
					err = e
					log.Println(e)
					return
				}
				if notOnAir {
					break L_main
				}
				if forbidden {
					break L_loc
				}
				i = 0
			}
			select {
			case <-chInterrupt:
				break L_main
			case <-time.After(1 * time.Second):
			}
		}
	}
	if media.zipWriter != nil {
		media.zipWriter.Close()
	}

	signal.Stop(chInterrupt)

	return
}
